{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloudformation Chef Backend Servers v1.2",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": ""
    },
    "ImageId": {
      "Type": "String",
      "Default": ""
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String"
    },
    "SSHSecurityGroup" : {
      "Description" : "Select Security Group for SSH Access",
      "Type": "String",
      "Default": ""
    },
    "VPC": {
      "Description" : "Choose VPC to use",
      "Type" : "String",
      "Default": ""
    },
    "Subnet": {
      "Description" : "Choose Subnet",
      "Type" : "String",
      "Default": ""
    },
    "IAMRole": {
      "Description" : "Enter IAM Role name",
      "Type" : "String",
      "Default": ""
    },
    "AccessKey": {
      "Description" : "Enter User Access Key",
      "Type" : "String",
      "Default": ""
    },
    "SecretKey": {
      "Description" : "Enter User Secret Key",
      "Type" : "String",
      "Default": ""
    },
    "PrimaryENI": {
      "Description" : "Choose ENI to use",
      "Type" : "String",
      "Default": ""
    },
    "FailoverENI": {
      "Description" : "Choose ENI to use",
      "Type" : "String",
      "Default": ""
    },
    "VIP": {
      "Description" : "Enter VIP",
      "Type" : "String",
      "Default": ""
    },
    "VIPInternalDNS": {
      "Description" : "Enter VIP DNS",
      "Type" : "String",
      "Default": ""
    },
    "PrimaryIP": {
      "Description" : "Enter Private IP",
      "Type" : "String",
      "Default": ""
    },
    "PrimaryInternalDNS": {
      "Description" : "Enter Private DNS",
      "Type" : "String",
      "Default": ""
    },
    "FailoverIP": {
      "Description" : "Enter Private IP",
      "Type" : "String",
      "Default": ""
    },
    "FailoverInternalDNS": {
      "Description" : "Enter Private DNS",
      "Type" : "String",
      "Default": ""
    },
    "FE01DNS": {
      "Description" : "Enter Frontend01 DNS",
      "Type" : "String",
      "Default": ""
    },
    "FE02DNS": {
      "Description" : "Enter Frontend02 DNS",
      "Type" : "String",
      "Default": ""
    },
    "FE01IP": {
      "Description" : "Enter Frontend01 IP",
      "Type" : "String",
      "Default": ""
    },
    "FE02IP": {
      "Description" : "Enter Frontend02 IP",
      "Type" : "String",
      "Default": ""
    },
    "HostedZone": {
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "must match a route53 hosted domain/zone"
    },
    "HostedSubdomain": {
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "subdomain/prefix for chose hosted zone"
    },
    "BackendEBSID": {
      "Description" : "Choose Subnet",
      "Type" : "String",
      "Default": ""
    },
    "ChefDir": {
      "Type": "String",
      "Default": "",
      "Description": "Enter dir location"
    },
    "Bucket": {
      "Type": "String",
      "Default": "",
      "Description": "Enter S3 bucket name for chef backups & primary backened generated items"
    },
    "RestoreFile": {
      "Type": "String",
      "Default": "",
      "Description": "Enter Filename to restore backup from in backup bucket (Optional)"
    },
    "SignupDisable": {
      "Type": "String",
      "Default": "",
      "Description": "Enter True/False for signup disable (false by default)"
    },
    "SupportEmail": {
      "Type": "String",
      "Default": "",
      "Description": "Enter Support Email for Chef Server (Optional)"
    },
    "MailHost": {
      "Type": "String",
      "Default": "",
      "Description": "Enter Mail Host (Optional)"
    },
    "MailPort": {
      "Type": "String",
      "Default": "",
      "Description": "Enter Port for Mail Host (Optional)"
    },
    "LicenseCount": {
      "Type": "String",
      "Default": "",
      "Description": "Enter how many licenses you have purchased"
    },
    "SSLCRT": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter SSL certifcate"
    },
    "SSLKEY": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter SSL key"
    },
    "MailCreds": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Mail Credentials (e.g.; $username:$password)"
    },
    "NewRelicLicense": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter New Relic License Key"
    },
    "SumologicAccessID": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Sumologic Access ID"
    },
    "SumologicAccessKey": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Sumologic Access Key"
    },
    "SumologicPassword": {
        "Type": "String",
        "NoEcho": "true",
        "Default": "",
        "Description": "Enter Sumologic Password"
    },
    "S3Dir": {
        "Type": "String",
        "Default": "",
        "Description": "Path to mount S3 Bucket to (created during CFN run)"
    },
    "Cookbook": {
        "Type": "String",
        "Default": "",
        "Description": "Cookbook Name"
    },
    "CookbookGit": {
        "Type": "String",
        "Default": "",
        "Description": "Git Clone URI for Cookbook"
    },
    "CookbookGitBranch": {
        "Type": "String",
        "Default": "",
        "Description": "Git Clone Branch"
    },
    "EBSMountPath": {
      "Type": "String",
      "Default": "",
      "Description": "Enter EC2 Mount Point for Backend EBS Device"
    },
    "UserDataScript": {
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "URL for userdata script"
    },
    "BackupEnable": {
      "Type": "String",
      "Default": "",
      "Description": "Select True/False if you wanted to enable backups"
    },
    "AnalyticsSubdomain": {
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "subdomain/prefix for chose hosted zone"
    },
    "AnalyticsInternalDNS": {
      "Description" : "Enter Private DNS",
      "Type" : "String",
      "Default": ""
    },
    "AnalyticsDNS": {
      "Description" : "Enter Private DNS",
      "Type" : "String",
      "Default": ""
    },
    "AnalyticsIP": {
      "Description" : "Enter Private IP",
      "Type" : "String",
      "Default": ""
    }
},
"Resources": {
  "BackendEIP": {
    "Type": "AWS::EC2::EIP",
    "Properties": {
      "InstanceId": {
        "Ref": "BackendPrimaryEC2Instance"
      },
      "Domain": "vpc"
    }
  },
  "FailoverEIP": {
    "Type": "AWS::EC2::EIP",
    "Properties": {
      "InstanceId": {
        "Ref": "BackendFailoverEC2Instance"
      },
      "Domain": "vpc"
    }
  },
  "BackendPrimaryEC2Instance": {
    "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": { "Ref": "IAMRole" },
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": {"Ref": "InstanceType"},
        "ImageId" : {"Ref": "ImageId"},
        "KeyName": {"Ref": "KeyName"},
        "Tags": [ {"Key": "Name", "Value": "Chef-Backend-Primary"}],
        "NetworkInterfaces" : [ {"NetworkInterfaceId" : {"Ref" : "PrimaryENI"}, "DeviceIndex" : 0 } ],
        "Volumes" : [
           { "VolumeId" : { "Ref" : "BackendEBSID" }, "Device" : "/dev/sdf" }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "standard",
              "DeleteOnTermination": "true",
              "VolumeSize": "20"
            }
          }
        ],
        "UserData": {
          "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -xev\n",
                "apt-get update && apt-get -y upgrade \n",
                "apt-get install -y wget curl python-setuptools python-pip git\n",
                "# Helper function to set wait timer\n",
                "function error_exit\n",
                "{\n",
                "  /usr/local/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "PrimaryWaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",
                "export -f error_exit\n",
                "curl -Sl ", { "Ref" : "UserDataScript" }," -o /tmp/userdata.sh\n",
                "chmod +x /tmp/userdata.sh \n",
                "export REGION=", {"Ref" : "AWS::Region" } ," \n ",
                "set +xv \n",
                "export ACCESS_KEY=", {"Ref" : "AccessKey" } ," \n ",
                "export SECRET_KEY=", {"Ref" : "SecretKey" } ," \n ",
                "set -xv \n",
                "export ENI=", {"Ref" : "PrimaryENI" } ," \n ",
                "export VIP=", {"Ref" : "VIP" } ," \n ",
                "export DNS=", {"Ref" : "PrimaryInternalDNS" } ," \n ",
                "export PRIMARY_DNS=", {"Ref" : "PrimaryInternalDNS" } ," \n ",
                "export PRIMARY_IP=", {"Ref" : "PrimaryIP" } ," \n ",
                "export FAIL_DNS=", {"Ref" : "FailoverInternalDNS" } ," \n ",
                "export FAIL_IP=", {"Ref" : "FailoverIP" } ," \n ",
                "export VIP_DNS=", {"Ref" : "VIPInternalDNS" } ," \n ",
                "export FE01_DNS=", {"Ref" : "FE01DNS" } ," \n ",
                "export FE01_IP=", {"Ref" : "FE01IP" } ," \n ",
                "export FE02_DNS=", {"Ref" : "FE02DNS" } ," \n ",
                "export FE02_IP=", {"Ref" : "FE02IP" } ," \n ",
                "export DOMAIN=", {"Ref": "HostedZone"} ," \n ",
                "export SUBDOMAIN=", {"Ref": "HostedSubdomain"} ," \n ",
                "export EBS_ID=", {"Ref" : "BackendEBSID" } ," \n ",
                "export EBS_MOUNT_PATH=", {"Ref" : "EBSMountPath" } ," \n ",
                "export BUCKET=", {"Ref" : "Bucket" } ," \n ",
                "export BACKUP_ENABLE=", {"Ref" : "BackupEnable" } ," \n ",
                "export RESTORE_FILE=", {"Ref" : "RestoreFile" } ," \n ",
                "export CHEFDIR=", {"Ref" : "ChefDir" } ," \n ",
                "export COOKBOOK=", {"Ref" : "Cookbook" } ," \n ",
                "export COOKBOOK_GIT=", {"Ref" : "CookbookGit" } ," \n ",
                "export COOKBOOK_BRANCH=", {"Ref" : "CookbookGitBranch" } ," \n ",
                "export SIGNUP_DISABLE=", {"Ref" : "SignupDisable" } ," \n ",
                "export S3DIR=", {"Ref" : "S3Dir" } ," \n ",
                "export SUPPORT_EMAIL=", {"Ref" : "SupportEmail" } ," \n ",
                "set +xv \n",
                "export SSL_CERT=", {"Ref" : "SSLCRT" } ," \n ",
                "export SSL_KEY=\"", {"Ref" : "SSLKEY" } ,"\" \n ",
                "export NR_LICENSE=", {"Ref" : "NewRelicLicense" } ," \n ",
                "export SUMO_ACCESS_ID=", {"Ref" : "SumologicAccessID" } ," \n ",
                "export SUMO_ACCESS_KEY=", {"Ref" : "SumologicAccessKey" } ," \n ",
                "export SUMO_PASSWORD=", {"Ref" : "SumologicPassword" } ," \n ",
                "export MAIL_CREDS=\"", {"Ref" : "MailCreds" } ,"\" \n ",
                "set -xv \n",
                "export MAIL_HOST=", {"Ref" : "MailHost" } ," \n ",
                "export MAIL_PORT=", {"Ref" : "MailPort" } ," \n ",
                "export LICENSE_COUNT=", {"Ref" : "LicenseCount" } ," \n ",
                "export ANALYTICS_SUBDOMAIN=", {"Ref": "AnalyticsSubdomain"} ," \n ",
                "export ANALYTICS_DNS=", {"Ref" : "AnalyticsDNS" } ," \n ",
                "export ANALYTICS_IP=", {"Ref" : "AnalyticsIP" } ," \n ",
                "export ROLE=primary \n ",
                "/tmp/userdata.sh\n",
                "# All is well so signal success and let CF know wait function is complete\n",
                "/usr/local/bin/cfn-signal -e 0 -r \"Server setup complete\" '", { "Ref" : "PrimaryWaitHandle" }, "'\n",
                "rm -f /tmp/userdata.sh"
              ]
            ]
          }
        }
      }
    },
    "BackendFailoverEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": ["BackendPrimaryEC2Instance", "PrimaryWaitCondition"],
      "Properties": {
        "IamInstanceProfile": { "Ref": "IAMRole" },
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "InstanceType": {"Ref": "InstanceType"},
        "ImageId" : {"Ref": "ImageId"},
        "KeyName": {"Ref": "KeyName"},
        "Tags": [ {"Key": "Name", "Value": "Chef-Backend-Failover"}],
        "NetworkInterfaces" : [ {"NetworkInterfaceId" : {"Ref" : "FailoverENI"}, "DeviceIndex" : 0 } ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "standard",
              "DeleteOnTermination": "true",
              "VolumeSize": "20"
            }
          }
        ],
        "UserData": {
          "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -xev\n",
                "apt-get update && apt-get -y upgrade \n",
                "apt-get install -y wget curl python-setuptools python-pip git\n",
                "# Helper function to set wait timer\n",
                "function error_exit\n",
                "{\n",
                "  /usr/local/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "FailoverWaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",
                "export -f error_exit\n",
                "curl -Sl ", { "Ref" : "UserDataScript" }," -o /tmp/userdata.sh\n",
                "chmod +x /tmp/userdata.sh \n",
                "export REGION='", {"Ref" : "AWS::Region" } ,"' \n ",
                "export ENI='", {"Ref" : "FailoverENI" } ,"' \n ",
                "export VIP='", {"Ref" : "VIP" } ,"' \n ",
                "export DNS='", {"Ref" : "FailoverInternalDNS" } ,"' \n ",
                "export PRIMARY_DNS='", {"Ref" : "PrimaryInternalDNS" } ,"' \n ",
                "export PRIMARY_IP='", {"Ref" : "PrimaryIP" } ,"' \n ",
                "export FAIL_DNS='", {"Ref" : "FailoverInternalDNS" } ,"' \n ",
                "export FAIL_IP='", {"Ref" : "FailoverIP" } ,"' \n ",
                "export VIP_DNS='", {"Ref" : "VIPInternalDNS" } ,"' \n ",
                "export FE01_DNS='", {"Ref" : "FE01DNS" } ,"' \n ",
                "export FE01_IP='", {"Ref" : "FE01IP" } ,"' \n ",
                "export FE02_DNS='", {"Ref" : "FE02DNS" } ,"' \n ",
                "export FE02_IP='", {"Ref" : "FE02IP" } ,"' \n ",
                "export DOMAIN='", {"Ref": "HostedZone"} ," \n ",
                "export SUBDOMAIN='", {"Ref": "HostedSubdomain"} ," \n ",
                "export EBS_ID='", {"Ref" : "BackendEBSID" } ,"' \n ",
                "export EBS_MOUNT_PATH='", {"Ref" : "EBSMountPath" } ,"' \n ",
                "export BACKUP_ENABLE='", {"Ref" : "BackupEnable" } ,"' \n ",
                "export RESTORE_FILE='", {"Ref" : "RestoreFile" } ,"' \n ",
                "export CHEFDIR='", {"Ref" : "ChefDir" } ,"' \n ",
                "export BUCKET='", {"Ref" : "Bucket" } ,"' \n ",
                "export S3DIR='", {"Ref" : "S3Dir" } ,"' \n ",
                "export COOKBOOK='", {"Ref" : "Cookbook" } ,"' \n ",
                "export COOKBOOK_GIT='", {"Ref" : "CookbookGit" } ,"' \n ",
                "export COOKBOOK_GIT_BRANCH='", {"Ref" : "CookbookGitBranch" } ,"' \n ",
                "export SIGNUP_DISABLE='", {"Ref" : "SignupDisable" } ,"' \n ",
                "export SUPPORT_EMAIL='", {"Ref" : "SupportEmail" } ,"' \n ",
                "export MAIL_HOST='", {"Ref" : "MailHost" } ,"' \n ",
                "export MAIL_PORT='", {"Ref" : "MailPort" } ,"' \n ",
                "export LICENSE_COUNT='", {"Ref" : "LicenseCount" } ,"' \n ",
                "export ANALYTICS_SUBDOMAIN='", {"Ref": "AnalyticsSubdomain"} ," \n ",
                "export ANALYTICS_DNS='", {"Ref" : "AnalyticsDNS" } ,"' \n ",
                "export ANALYTICS_IP='", {"Ref" : "AnalyticsIP" } ,"' \n ",
                "export ROLE=failover \n ",
                "/tmp/userdata.sh\n",
                "# All is well so signal success and let CF know wait function is complete\n",
                "/usr/local/bin/cfn-signal -e 0 -r \"Server setup complete\" '", { "Ref" : "FailoverWaitHandle" }, "'\n",
                "rm -f /tmp/userdata.sh"
              ]
            ]
          }
        }
      }
    },
   "PrimaryWaitHandle" : {
     "Type" : "AWS::CloudFormation::WaitConditionHandle"
   },
   "FailoverWaitHandle" : {
     "Type" : "AWS::CloudFormation::WaitConditionHandle"
   },
   "PrimaryWaitCondition" : {
     "Type" : "AWS::CloudFormation::WaitCondition",
     "DependsOn" : "BackendPrimaryEC2Instance",
     "Properties" : {
         "Handle" : { "Ref" : "PrimaryWaitHandle" },
         "Timeout" : "1600"
       }
    },
    "FailoverWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "BackendFailoverEC2Instance",
      "Properties" : {
          "Handle" : { "Ref" : "FailoverWaitHandle" },
          "Timeout" : "1600"
        }
    }
  }
}
